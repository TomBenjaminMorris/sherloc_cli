#!/usr/bin/env ruby
require 'gli'
require 'rainbow'
require 'sherloc'
# begin # XXX: Remove this begin/rescue before distributing your app

# rescue LoadError
#   STDERR.puts "In development, you need to use `bundle exec bin/sherloc` to run your app"
#   STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
#   STDERR.puts "Feel free to remove this message from bin/sherloc now"
#   exit 64
# end

class App
  extend GLI::App

  program_desc 'Sherloc is a container and JavaScript file scanning tool to help you with your workflow and identify gaps in your knowledge relating to security vulnerabilities'

  version Sherloc::VERSION  

  subcommand_option_handling :normal
  arguments :strict

  desc 'Perform a scan of a container image or a code file'
  arg_name 'File or container image to be scanned'
  command :scan do |c|

    # Define switches

    c.desc 'Perform a scan on multiple files'
    c.switch %i[m multi-scan]

    c.desc 'Scan a container image'
    c.switch %i[i image]

    c.desc 'Scan a code file'
    c.switch %i[f file]

    # Scan action logic

    c.action do |global_options,options,args|

      # Extract scan file from arguments
      scan_file = args[0]

      # Detect file type
      isJS = Sherloc::Detect.run!(scan_file)

      # File validation
      isMulti, isCodeFile, isImage = Sherloc::Validate.run!(options, scan_file)
      
      # Application logic
      
      if isMulti
        # Parse multi-file
        f_lines = Sherloc::ParseMulti.run!(options, args)

        if isImage
          Sherloc::ScanImageMulti.run!(f_lines)
          Sherloc::AggregateOutput.run!(isMulti)
        else isCodeFile
          Sherloc::ScanFileMulti.run!(scan_file)
        end

      # Single file logic
      else
        if isImage
          Sherloc::ScanImage.run!(scan_file)
          Sherloc::AggregateOutput.run!(isMulti)
        else isCodeFile
          Sherloc::ScanFile.run!(scan_file)
        end
      end

    end
  end

  # desc 'Describe add here'
  # arg_name 'Describe arguments to add here'
  # command :add do |c|
  #   c.action do |global_options,options,args|
  #     puts "add command ran"
  #   end
  # end

  # desc 'Describe complete here'
  # arg_name 'Describe arguments to complete here'
  # command :complete do |c|
  #   c.action do |global_options,options,args|
  #     puts "complete command ran"
  #   end
  # end

  pre do |global,command,options,args|

    system('mkdir -p ./json_files')
    puts "\n"

    # scan_file = options[:f]
    # puts File.extname(scan_file)

    # puts options
    # puts args[0]

    # puts "this runs first"
    # Pre logic here
    # Return true to proceed; false to abort and not call the
    # chosen command
    # Use skips_pre before a command to skip this block
    # on that command only
    true
  end

  post do |global,command,options,args|

    puts "\n"

    # puts "this runs last"
    # Post logic here
    # Use skips_post before a command to skip this
    # block on that command only
  end

  on_error do |exception|
    # Error logic here
    # return false to skip default error handling
    true
  end
end

exit App.run(ARGV)
