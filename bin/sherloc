#!/usr/bin/env ruby
require 'gli'
require 'rainbow'
begin # XXX: Remove this begin/rescue before distributing your app
  require 'sherloc'

rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/sherloc` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/sherloc now"
  exit 64
end

class App
  extend GLI::App

  program_desc 'Describe your application here'

  version Sherloc::VERSION  

  subcommand_option_handling :normal
  arguments :strict

  desc 'Describe some switch here'
  switch [:s,:switch]

  desc 'Describe some flag here'
  default_value 'the default'
  arg_name 'The name of the argument'
  flag [:f,:flagname]

  desc 'Perform a scan of a container image or a code file'
  arg_name 'Describe arguments to list here'
  command :scan do |c|

    # Define switches

    c.desc 'Perform a scan on multiple files'
    c.switch %i[m multi-scan]

    c.desc 'Scan a container image'
    c.switch %i[i image]

    c.desc 'Scan a code file'
    c.switch %i[c code]

    # Scan action logic

    c.action do |global_options,options,args|

      # Separate arguments and switches

      scan_file = args[0]
      isMulti = options[:m]
      isCodeFile = options[:c]
      isImage = options[:i]
      
      file_ext = File.extname(scan_file)
      isJS = file_ext == ".js"

      # File validation

      if isCodeFile && !isJS
        raise Rainbow("Only .js file types are supported for code scanning").red.inverse
      end

      if isImage && isJS
        raise Rainbow("Non-compatible file type for image scanning: " + file_ext).red.inverse
      end

      if isMulti
        puts Rainbow("Attempting to parse multi file...").cyan
        f_lines = File.open(scan_file).read.split("\n")

        f_lines.each_with_index do |line, index|

          file_ext = File.extname(line)
          isJS = file_ext == ".js"

          if (isCodeFile && !isJS) || (isImage && isJS)
            raise Rainbow("Unsupported file type in multi file").red.inverse
          end
        end
      end

      # Application logic

      if isMulti
        if isImage

          f_lines.each_with_index do |line, index|
            puts Rainbow("Scanning: " + line + "...").cyan.inverse
            system("trivy --skip-update -f json -o ./json_files/results" + (index+1).to_s + ".json " + line);
            puts Rainbow("Completed scan of " + line).blue.inverse
          end

        else isCodeFile
          puts Rainbow("Scanning code file: " + scan_file + "...").cyan.inverse
        end

      # Single file logic
      else
        if isImage
          puts "image scan single: " + scan_file
          puts Rainbow("Attempting scan on image: " + scan_file + "...").cyan.inverse
          system("trivy --skip-update -f json -o ./json_files/results.json " + scan_file);
          puts Rainbow("Completed scan of " + scan_file).blue.inverse

        else isCodeFile
          puts Rainbow("Scanning code file: " + scan_file + "...").cyan.inverse
        end
      end

    end
  end

  # desc 'Describe add here'
  # arg_name 'Describe arguments to add here'
  # command :add do |c|
  #   c.action do |global_options,options,args|
  #     puts "add command ran"
  #   end
  # end

  # desc 'Describe complete here'
  # arg_name 'Describe arguments to complete here'
  # command :complete do |c|
  #   c.action do |global_options,options,args|
  #     puts "complete command ran"
  #   end
  # end

  pre do |global,command,options,args|

    # scan_file = options[:f]
    # puts File.extname(scan_file)

    # puts options
    # puts args[0]

    # puts "this runs first"
    # Pre logic here
    # Return true to proceed; false to abort and not call the
    # chosen command
    # Use skips_pre before a command to skip this block
    # on that command only
    true
  end

  post do |global,command,options,args|
    # puts "this runs last"
    # Post logic here
    # Use skips_post before a command to skip this
    # block on that command only
  end

  on_error do |exception|
    # Error logic here
    # return false to skip default error handling
    true
  end
end

exit App.run(ARGV)
